[ 제네릭 타입 ]
	1. 정의 : 여러 가지 타입에서 동작할 수 있도록 만든 문법
	2. 목적 : 클래스 만들때 변수 타입을 정하지 않고 인스턴스를 생성할때 변수의 타입 정한다.
		-> 다양한 타입의 데이터를 처리할 수 있다.
	3. 사용법 
		* < > : 꺽은괄호 이용한 표현 
		1. 클래스 정의 
			(1)
			class 클래스명< 제네릭타입명 >{ 
				제네릭타입명 변수명;
			}
			(2)
			class 클래스명< 제네릭타입명A , 제네릭타입명B > {
				제네릭타입명A 변수명;
				제네릭타입명B 변수명;
			}
			* 주로 제네릭타입명은 대문자 1개 
			
		2. 제네릭타입 이용한 인스턴스 생성 
			(1)
			클래스명< 타입명 > 변수명 = new 생성자명<>();
			(2)
			클래스명< 타입명 , 타입명 > 변수명 = new 생성자명<>();
			
	4. 사용처 : 컬렉션프레임워크, ArrayList< >
	5. 특징 : 1. 변수의 유연성 2. 코드중복제거 3. 잘못된타입방지
	
[ 컬렉션 프레임워크 ]
	- 컬렉션(수집) , 프레임(틀) , 워크(일) : 일(개발) 할때 수집(저장) 관련 해서 미리 만들어진 틀(라이브러리) 제공
	1. 정의 : 자료들을 수집/저장 하는 방법을 미리 만들어둔 인터페이스/클래스(메소드) 집합소
	2. 목적 : 복잡한 자료구조를 제공받아 편리한 데이터 관리 할 수 있다.
		* 자료구조란? 컴퓨터가 데이터를 저장하는 효율적인 방법들 ex] 큐/스택/해시/트리 등등
	3. 컬렉션 인터페이스 종류 
		[1] List 인터페이스 				
			(1) 구현체 				: 저장된 순서(인덱스) 이용한 데이터 관리 와 데이터 중복 허용 한다.
				ArrayList 클래스		: 
				Vector 클래스			: 멀티스레드에서 주로 사용된다. , *동기화된 메소드를 제공한다.*		
				LinkedList 클래스		: 리스트내 요소 중간에 삽입/삭제 는 ArrayList 보다 좋은 성능을 가진다.	
			(2) 메소드
				// (1) .add( 자료 ) : 리스트 내 지정한 자료를 마지막 요소 추가.
				// (1) .add( 인덱스 , 자료 ) : 리스트 내 지정한 인덱스에 지정한 자료의 요소 추가 
				// (2) .set( 인덱스 , 자료 ) : 리스트 내 지정한 인덱스에 지정한 자료의 요소 수정/변경 
				// (3) .get( 인덱스 ) : 리스트내 지정한 인덱스의 요소 값 반환  
				// (4) .size() : 리스트내 요소 전체 개수 반환 
				// (5) .contains( 자료 ) : 리스트내 지정한 자료 존재 여부 반환 , true/false
				// (6) .indexOf( 자료 ) : 리스트내 지정한 자료 의 인덱스 반환 , 없으면 -1 있으면 인덱스 수 반환 
				// (7) .remove( 인덱스/자료 ) : 리스트내 지정한 인덱스/자료 의 요소 삭제
			 	// (8) .clear() : 리스트내 모든 요소 삭제 
				// (9) .isEmpty() : 리스트내 요소가 비어 있으면 true 1이상 존재하면 false 반환
				// (10) 순회 :  1. 일반 for문  2. 향상된 for문, 3.forEach( )
		[2] Set 인터페이스 
			(1) 구현체 				: 저장된 순서(인덱스) 없이 주소값으로 데이터 관리 하므로 중복을 허용하지 않는다. ( 중복제거 )
				HashSet 클래스 		: 저장순서(인덱스) 없고 , 중복불가능 구조 
				TreeSet 클래스 		: 저장순서(인덱스) 없고 , 중복불가능 구조 , + 자동 정렬
			(2) 메소드 
				// (1) .add( 자료 ) : set 내 지정한 자료를 추가한다.
				// (2) .size( ) : set 내 전체 요소 개수 반환 
				// (3) .remove( 자료 ) : set 내 지정한 자료가 존재하면 삭제 
				// (4) .contains( 자료 ) : set 내 지정한 자료가 존재하는지 여부 반환 
				// (5) .iterator() : set 내 반복자 인터페이스 를 반환 함수 
					* set 컬렉션은 인덱스 없으므로 인덱스로 조회가 불가능하다.
					Iterator 타입 
						1. .hasNext() : 다음 요소가 존재하면 true , 없으면 fasle 반환 
						2. .next() : 다음 요소 값 반환  
				// (5) 순회 : 1. 향상된 for문, 2.forEach( )
				
		[3] Map 인터페이스 
			(1) 구현체 				: 저장된 순서(인덱스) 없이 key 와 value 로 entry(엔트리/한쌍)를 저장하는 구조
									: key (중복불가능) , value (중복가능)
				HashMap 클래스 
				HashTable 클래스 		: 멀티스레드에서 주로 사용된다. , *동기화된 메소드를 제공한다.*
			(2) 메소드 
				// (1) .put( "key" , value ) 		: map 객체내 key와value를 한쌍(entry)으로 저장 , key중복불가능/value가능
				// (2) .get( "key")					: map 객체내 지정한 key의 value 값 반환 
				// (3) .size()						: map 객체내 전체 entry 개수 반환 
				// (4) .remove("key")				: map 객체내 지정한 key의 엔트리를 삭제 
				// (5) .containsKey("key") 			: map 객체내 지정한 key 존재여부 반환 
				// (5) .containsValue( value ) 		: map 객체내 지정한 value 존재여부 반환 
				// (6) .entrySet()					: map 객체내 모든 entry 를 반환 함수.
				// (7) .keySet()					: map 객체내 모든 key 를 반환 함수. 
				// (8) .values()					: map 객체내 모든 value 를 반환 함수.
				// (9) 순회 
				
				
* 인터페이스 란 ? 무엇을 사용할지 정의해두는것( 추상메소드 : 메소드를 선언만 하고 구현하지 않은 메소드 )
* 구현(객)체 이란? 인터페이스를 구현한 객체( 클래스가 인터페이스를 implement 해서 추상메소드를 오버라이딩한 객체 )

		