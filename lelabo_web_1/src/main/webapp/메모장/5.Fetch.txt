
[ JS 함수 ] : 자바와 다르게 JS 함수는 하나의 자료의 타입이다.
	1. 선언적 함수 
		- function 함수명( 매개변수명 , 매개변수명 ){ }
	2. 익명 함수		, 상수/변수 에 저장 가능.
		- function( 매개변수명 , 매개변수명 ) { }
		- const 상수명 = function( 매개변수명 , 매개변수명 ) { }
	3. 람다식 함수		, 상수/변수 에 저장 가능 
		- ( 매개변수명 , 매개변수명 ) => { }
		- const 상수명 = ( 매개변수명 , 매개변수명 ) => { }

[ 람다식 활용처 ]
	1. 배열명.forEach( 람다식표현 );
		- [ ].forEach( (반복변수명) => { 실행문; } )
		- 배열내 첫번째 요소부터 마지막 요소까지 반복변수명에 하나씩 요소를 대입 반복 
		- forEach 사용처 : 배열 요소 단순 순회/조회
		
	2. let 새로운배열명.map( 람다식표현 );
		- [ ].map( (반복변수명) => { 실행문; } )
		- 배열내 첫번째 요소부터 마지막 요소까지 반복변수명에 하나씩 요소를 대입 반복 
		- 차이점 : forEach 함수는 return 불가능, map 함수는 return 가능하다.
		- map 사용처 : 배열 복사
		
	3. fetch( ).then( 람다식표현 ).then( 람다식표현 ).catch( 람다식표현 )
	
[ fetch ]
	1. 정의 : JS 에서 제공하는 내장 함수. 
	2. 역할 : HTTP 요청을 보내고 응답을 비동기적으로 처리 함수.
	3. 사용법
		fetch( URL , OPTION )
			1. URL
				- 1. 통신할 서블릿의 URL 주소 , @WebServlet() 확인
				- 2. 쿼리스트링 , ?매개변수=값&매개변수=값 
				
			2. OPTION : 요청 보낼때 사용되는 HTTP HEADER 정보 설정 
				- 1. method : 'GET' 또는 'POST' 또는 'PUT' 또는 'DELETE'
					-> HTTP 프로토콜의 method 선택.
				- 2. headers : { 'Content-Type' : 'application/json' }
					-> HTTP 프로토콜 요청(request) 보낼때 데이터 자료 타입 표시/명시. (3.HTTP.txt 참고 )
				- 3. body : JSON.stringify( 전송할객체 )
					-> HTTP는 문자 자료만 전송이 가능하므로 , 객체타입을 문자 타입으로 변환 필요하다. JSON.stringify()
			
			3. 요청 보내고 응답을 받을때 설정 
				.then( 응답객체 => 응답자료타입변환 )
					1. .json() : fetch 함수로 받은 HTTP 응답객체 에서 JSON형식(application/json)으로 변환하고 반환 하면 다음 then( ) 이어서
					2. .text() : fetch 함수로 받은 HTTP 응답객체 에서 문자형식(text/plain)으로 변환하고 반환 하면 다음 then( ) 이어서
				.then( 변수명 => { 실행문; } )
			
			4. 통신에 예외발생
				.catch( 예외변수명 => { 예외처리 } )

			
			
			
			
			
			
	