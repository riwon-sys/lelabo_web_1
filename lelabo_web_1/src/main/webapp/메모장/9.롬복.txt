[ 롬복 ]
	1. 정의 : 반복되는 코드들을 줄여주는 라이브러리
		* 라이브러리 : 미리 만들어진 클래스/인터페이스(코드들)
	2. 목적 : DTO , VO , Entity 에서 사용된다.
		- 과거 개발자들이 협업에 있어서 관례적인 용어 정의 , 기술용어X
		1. DTO : data transfer object 데이터 이동 목적으로 사용되는 객체
		2. VO : value object 데이터 값을 가진 객체 ( * 불변성/setter 없음 ) 
		3. entity : 개체(실재/본체) 데이터 의 실제 ( 주로 DB 테이블/레코드 )
	3. 이클립스 설치  
		1. lombok jar 다운로드 
			1. URL : https://projectlombok.org/download
			2. Download 1.18.36
			3. 프로젝트 -> SRC -> MAIN -> WEBAPP -> WEB-INF -> lib 폴더에 저장 
		2. 프로젝트 lombok 라이브러리 빌드 
			1. 'lombok.jar' 오른쪽 클릭 -> [build path] -> [add ... ]
		3. 롬복 설치 
			1. 'lombok.jar' 오른쪽 클릭 -> [show in] -> [Terminal]
			2. 터미널에 'java -jar lombok.jar' 입력후 엔터 
			3. 롬복 설치 화면 실행 
				1. [ 적용할 IDE ] 선택
					- C:\Users\{pc이름}\eclipse\{이클립스버전}\eclipse	
				2. [ install/update ] 클릭 
			4. 'install successful' 확인 -> [ quit installer ] 클릭 
	4. @ 롬복 주요 어노테이션 
		1. @NoArgsConstructor		: 	디폴트 생성자 코드 생성 
		
		2. @AllArgsConstructor		:	모든 매개변수 생성자 코드 생성 
		
		3. @Getter					:	멤버변수의 getter 메소드 코드 생성 
		
		4. @Setter					: 	멤버변수의 setter 메소드 코드 생성 
		
		5. @ToString				:	멤버변수의 toString 메소드 코드 생성 
					
	5. 코드 자동 생성 : 프로젝트가 컴파일(실행) 될때 지정한 어노테이션에 따라 코드가 자동으로 생성된다.				
					

[ @ : 어노테이션 ]
    1. 정의 : java 및 라이브러리(프레임워크)에서 코드에 메타데이터를 추가 하는 문법
    2. 목적 : 1.메타데이터제공 2.코드간소화 3.가독성향상
    3. 메타데이터
       (1) 정의 : 코드를 설명하는 데이터
       (2) 목적 : 자바 코드에 추가적인 데이터를 주입 할때 사용된다.
       (3) 동작방식
          ㄴ 1. 컴파일(실행)
          ㄴ 2. 리플렉션 : 런타임 중 클래스를 읽어와서 동적으로 메모리(JVM)에  클래스 객체를 생성
                 ㄴ - Class.forname("com.mysql.cj.jdbcDriver"); : Driver 클래스를 읽고 인스턴스를 생성.
       [*] 코드 위에 @ 적고 아래 코드를 사용하는 방법을 스티커 처럼 부착하는 방법 , 스티커 : 라이브 러리회사들이 만들어준다.
       @Getter : 아래 클래스는 내가 지정한 스티커 처럼 사용해 라는 뜻 * 스티커 / 라벨 /             
    4. 어노테이션의 종류
       (1) 표준 어노테이션
        @Override : 부모 메소드를 오버라이딩(재정의) 설명할 때 사용되는 어노테이션[*]
        @Deprecated : 더 이상 사용하지 않는 코드 설명할때 사용되는 어노테이션             
       (2) 메타 어노테이션 : 어노테이션 자체에 코드를 정의하거나 동작 제어할 때 사용되는 어노테이션 / 주로 라이브러리  
       각 러이브러리 회사마다 너무 다양하다
          ㄴ 1. 롬복 어노테이션
          ㄴ 2. 스프링 어노테이션[*]
